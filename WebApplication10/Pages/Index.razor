@page "/"
@using Blazorise.DataGrid
@using System.Net.Http;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject IJSRuntime JSRuntime;

<Alert @ref="myAlert" Color="Color.Warning">
    沒有時間寫，等個幾天吧!
    <CloseButton />
</Alert>

<h1>公會戰查詢</h1>

<p>查詢伺服器/時間</p>
<hr />
<div class="d-flex flex-row">
    <DropdownList Class="mr-3" TItem="MySelectModel" TValue="int"
                  Data="@serverList"
                  TextField="@((item)=>item.MyTextField)"
                  ValueField="@((item)=>item.MyValueField)"
                  @bind-SelectedValue="@selectedServer"
                  Color="Color.Primary">
        @(serverList?.FirstOrDefault(x=>x.MyValueField == selectedServer)?.MyTextField ?? "請選擇伺服器")
    </DropdownList>
    <DropdownList Class="mr-3" TItem="MySelectModel" TValue="int"
                  Data="@dateList"
                  TextField="@((item)=>item.MyTextField)"
                  ValueField="@((item)=>item.MyValueField)"
                  @bind-SelectedValue="@selectedDate"
                  Color="Color.Primary">
        @(dateList?.FirstOrDefault(x=>x.MyValueField == selectedDate)?.MyTextField ?? "請選擇日期")
    </DropdownList>
    <DropdownList Class="mr-3" TItem="MySelectModel" TValue="int"
                  Data="@timeList"
                  TextField="@((item)=>item.MyTextField)"
                  ValueField="@((item)=>item.MyValueField)"
                  @bind-SelectedValue="@selectedTime"
                  Color="Color.Primary">
        @(timeList?.FirstOrDefault(x=>x.MyValueField == selectedTime)?.MyTextField ?? "請選擇時間")
    </DropdownList>
    <Button Color="Color.Primary" Clicked="@OnSelectLatestBtnClicked">選取最新資料</Button>

</div>
<br />
<br />
<div class="d-flex flex-row">
    <TextEdit Class="mr-3" Placeholder="查詢內容 (留白為不加限制)" Text="@FilterText" TextChanged="@OnNameChanged"></TextEdit>
    <DropdownList Class="mr-3" TItem="MySelectModel" TValue="int"
                  Data="@searchFilterList"
                  TextField="@((item)=>item.MyTextField)"
                  ValueField="@((item)=>item.MyValueField)"
                  @bind-SelectedValue="@selectedFilter"
                  Color="Color.Primary">
        @(searchFilterList?.FirstOrDefault(x=>x.MyValueField == selectedFilter)?.MyTextField ?? "")
    </DropdownList>
    <Button Class="mr-3" Style="width: 120px;" Color="Color.Primary" Clicked="@OnSearchBtnClicked">查詢</Button>
    <Button Style="width: 120px;" Color="Color.Primary" Clicked="@OnSearchLineBtnClicked">查檔線</Button>
</div>
<br />
<DataGrid TItem="ClanData" Data="@clanDatas" ShowPager="true" PageSize="20" Hoverable="true">
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Rank)" Caption="排名"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Clan_Name)" Caption="戰隊名"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Member)" Caption="人數"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Lead_Name)" Caption="隊長名"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Damage)" Caption="分數"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Lap)" Caption="週目"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Boss)" Caption="Boss"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Left_Hp)" Caption="剩餘血量"></DataGridColumn>
    <DataGridColumn TItem="ClanData" Field="@nameof(ClanData.Grade_Rank)" Caption="上期"></DataGridColumn>
</DataGrid>
@code
{
    private Alert myAlert;
    private string url = "http://pcrguild.autopecker.com";
    private List<ClanData> clanDatas = new List<ClanData>();
    private List<ClanData> tmp_clanDatas = new List<ClanData>();
    private static readonly HttpClient client = new HttpClient();
    protected override async Task OnInitializedAsync()
    {
        var myObject = new
        {
            server = "1"
        };

        JsonContent content = JsonContent.Create(myObject);

        var response = await client.PostAsync(url + "/query/datetime", content);
        string responseString = await response.Content.ReadAsStringAsync();
        clanTime = JsonConvert.DeserializeObject<ClanTime>(responseString);

        var dates = clanTime.message.Keys.ToList();
        for (int i = 0; i < dates.Count(); i++)
        {
            var date = dates[i];
            dateList.Add(new MySelectModel() { MyTextField = date, MyValueField = i });
        }

        selectedDate = dateList.Count - 1;
    }

    public class MySelectModel
    {
        public int MyValueField { get; set; }
        public string MyTextField { get; set; }
    }

    static string[] Server = { "美食殿堂" };
    IEnumerable<MySelectModel> serverList = Enumerable.Range(1, Server.Length).Select(x => new MySelectModel { MyTextField = Server[x - 1], MyValueField = x });

    List<MySelectModel> dateList = new List<MySelectModel>();

    List<MySelectModel> timeList = new List<MySelectModel>();

    static string[] SearchFilter = { "戰隊名", "隊長名", "排名" };
    IEnumerable<MySelectModel> searchFilterList = Enumerable.Range(1, SearchFilter.Length).Select(x => new MySelectModel { MyTextField = SearchFilter[x - 1], MyValueField = x });

    private ClanTime clanTime = new ClanTime();

    private string FilterText;
    int _selectedServer = 1;
    int selectedServer
    {
        get => _selectedServer;
        set
        {
            _selectedServer = value;
        }
    }

    int _selectDate = 1;
    int selectedDate
    {
        get => _selectDate;
        set
        {
            _selectDate = value;
            timeList.Clear();
            var times = clanTime.message[dateList[_selectDate].MyTextField];
            for (int i = 0; i < times.Count; i++)
            {
                var time = times[i];
                timeList.Add(new MySelectModel() { MyTextField = time, MyValueField = i });
            }

            selectedTime = timeList.Count - 1;
        }
    }

    int selectedTime { get; set; } = 1;

    int selectedFilter { get; set; } = 1;

    void OnSelectLatestBtnClicked()
    {
        selectedTime = timeList.Count - 1;
        selectedDate = dateList.Count - 1;
    }

    string GetTimeSetting()
    {
        return dateList[selectedDate].MyTextField + timeList[selectedTime].MyTextField;
    }

    async void OnSearchBtnClicked()
    {
        var temp = new List<ClanData>();
        var myObject = new
        {
            server = "1",
            date = GetTimeSetting()
        };

        JsonContent content = JsonContent.Create(myObject);

        var response = await client.PostAsync(url + "/query/clandata", content);
        string responseString = await response.Content.ReadAsStringAsync();
        Console.WriteLine(responseString);

        var datas = JsonConvert.DeserializeObject<ClanDatas>(responseString);
        foreach (var data in datas.Message)
        {
            temp.Add(new ClanData
            {
                Rank = data["Rank"],
                Clan_Name = data["Clan_Name"],
                Member = data["Member"],
                Lead_Name = data["Lead_Name"],
                Damage = data["Damage"],
                Lap = data["Lap"],
                Boss = data["Boss"],
                Left_Hp = data["Left_Hp"],
                Grade_Rank = data["Grade_Rank"]
            });
        }
        tmp_clanDatas = temp.ToList();
        clanDatas = temp.ToList();
        if (!string.IsNullOrWhiteSpace(FilterText))
            await OnNameChanged(FilterText);
        else
            StateHasChanged();
    }

    Task OnNameChanged(string value)
    {
        switch (selectedFilter)
        {
            case 1:
                clanDatas = tmp_clanDatas.Where(x => x.Clan_Name.Contains(value)).ToList();
                break;
            case 2:
                clanDatas = tmp_clanDatas.Where(x => x.Lead_Name.Contains(value)).ToList();
                break;
            case 3:
                clanDatas = tmp_clanDatas.Where(x => x.Rank == value).ToList();
                break;
        }

        FilterText = value;
        StateHasChanged();
        return Task.CompletedTask;
    }

    void OnSearchLineBtnClicked()
    {
        myAlert.Show();
    }

    public class ClanDatas
    {
        public List<Dictionary<string, string>> Message = new List<Dictionary<string, string>>();
    }

    public class ClanData
    {
        public string Rank { get; set; }
        public string Clan_Name { get; set; }
        public string Member { get; set; }
        public string Lead_Name { get; set; }
        public string Damage { get; set; }
        public string Lap { get; set; }
        public string Boss { get; set; }
        public string Left_Hp { get; set; }
        public string Grade_Rank { get; set; }
    }

    public class ClanTime
    {
        public Dictionary<string, List<string>> message = new Dictionary<string, List<string>>();
    }
}

